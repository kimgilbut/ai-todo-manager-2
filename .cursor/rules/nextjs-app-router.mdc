---
globs: app/**/*.ts,app/**/*.tsx
---

# Next.js 15 App Router 특화 규칙

## App Router 구조 및 규칙

### 디렉토리 구조
App Router의 파일 시스템 기반 라우팅을 준수:

```
app/
├── layout.tsx          # 루트 레이아웃
├── page.tsx            # 홈페이지 (/)
├── loading.tsx         # 전역 로딩 UI
├── error.tsx           # 전역 오류 UI
├── not-found.tsx       # 404 페이지
├── todos/              # 할 일 관련 페이지
│   ├── page.tsx        # /todos
│   ├── loading.tsx     # 할 일 페이지 로딩
│   ├── error.tsx       # 할 일 페이지 오류
│   ├── [id]/           # 동적 라우트
│   │   ├── page.tsx    # /todos/[id]
│   │   └── edit/       # 중첩 라우트
│   │       └── page.tsx # /todos/[id]/edit
│   └── api/            # API 라우트
│       ├── route.ts    # /api/todos
│       └── [id]/
│           └── route.ts # /api/todos/[id]
```

### 레이아웃 컴포넌트
중첩 레이아웃을 활용한 일관된 UI 구조:

```typescript
/**
 * 루트 레이아웃 - 모든 페이지에 공통으로 적용
 */
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ko">
      <body className={cn("min-h-screen bg-background font-sans antialiased")}>
        <div className="relative flex min-h-screen flex-col">
          <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
            <Navigation />
          </header>
          <main className="flex-1">
            {children}
          </main>
          <footer className="border-t">
            <Footer />
          </footer>
        </div>
        <Toaster />
      </body>
    </html>
  );
}
```

### 페이지 컴포넌트
각 페이지는 기본적으로 서버 컴포넌트로 작성:

```typescript
/**
 * 할 일 목록 페이지
 */
export default async function TodosPage() {
  // 서버에서 데이터 페칭
  const todos = await getTodos();

  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold">할 일 관리</h1>
        <p className="text-muted-foreground mt-2">
          AI가 도와주는 스마트한 할 일 관리
        </p>
      </div>
      
      <TodoList initialTodos={todos} />
    </div>
  );
}
```

## 서버 컴포넌트 vs 클라이언트 컴포넌트

### 서버 컴포넌트 사용
데이터 페칭과 정적 렌더링에 서버 컴포넌트 활용:

```typescript
/**
 * 할 일 상세 페이지 (서버 컴포넌트)
 */
export default async function TodoDetailPage({
  params,
}: {
  params: { id: string };
}) {
  const todo = await getTodoById(params.id);

  if (!todo) {
    notFound();
  }

  return (
    <div className="container mx-auto py-8">
      <TodoDetail todo={todo} />
    </div>
  );
}
```

### 클라이언트 컴포넌트 사용
상호작용이 필요한 컴포넌트는 클라이언트 컴포넌트로:

```typescript
'use client';

/**
 * 할 일 목록 컴포넌트 (클라이언트 컴포넌트)
 */
const TodoList = ({ initialTodos }: { initialTodos: Todo[] }) => {
  const [todos, setTodos] = useState(initialTodos);
  const [loading, setLoading] = useState(false);

  const addTodo = async (title: string) => {
    setLoading(true);
    try {
      const newTodo = await createTodo(title);
      setTodos(prev => [...prev, newTodo]);
    } catch (error) {
      toast.error('할 일 추가에 실패했습니다.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <CreateTodoForm onSubmit={addTodo} loading={loading} />
      <div className="space-y-2">
        {todos.map(todo => (
          <TodoItem key={todo.id} todo={todo} />
        ))}
      </div>
    </div>
  );
};
```

## API 라우트 구현

### RESTful API 설계
표준적인 HTTP 메서드와 상태 코드 사용:

```typescript
/**
 * 할 일 API 라우트
 */
export async function GET() {
  try {
    const todos = await getTodos();
    return NextResponse.json(todos);
  } catch (error) {
    console.error('할 일 목록 조회 오류:', error);
    return NextResponse.json(
      { error: '할 일 목록을 불러오는데 실패했습니다.' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    if (!body.title) {
      return NextResponse.json(
        { error: '할 일 제목은 필수입니다.' },
        { status: 400 }
      );
    }

    const todo = await createTodo(body);
    return NextResponse.json(todo, { status: 201 });
  } catch (error) {
    console.error('할 일 생성 오류:', error);
    return NextResponse.json(
      { error: '할 일 생성에 실패했습니다.' },
      { status: 500 }
    );
  }
}
```

### 동적 API 라우트
개별 리소스에 대한 CRUD 작업:

```typescript
/**
 * 개별 할 일 API 라우트
 */
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const todo = await getTodoById(params.id);
    
    if (!todo) {
      return NextResponse.json(
        { error: '할 일을 찾을 수 없습니다.' },
        { status: 404 }
      );
    }

    return NextResponse.json(todo);
  } catch (error) {
    console.error('할 일 조회 오류:', error);
    return NextResponse.json(
      { error: '할 일 조회에 실패했습니다.' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    const todo = await updateTodo(params.id, body);
    
    return NextResponse.json(todo);
  } catch (error) {
    console.error('할 일 수정 오류:', error);
    return NextResponse.json(
      { error: '할 일 수정에 실패했습니다.' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    await deleteTodo(params.id);
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('할 일 삭제 오류:', error);
    return NextResponse.json(
      { error: '할 일 삭제에 실패했습니다.' },
      { status: 500 }
    );
  }
}
```

## 로딩 및 오류 UI

### 로딩 UI
각 페이지와 레이아웃에 대한 로딩 상태 제공:

```typescript
/**
 * 할 일 페이지 로딩 UI
 */
export default function TodosLoading() {
  return (
    <div className="container mx-auto py-8">
      <div className="mb-8">
        <Skeleton className="h-8 w-48 mb-2" />
        <Skeleton className="h-4 w-64" />
      </div>
      
      <div className="space-y-4">
        {Array.from({ length: 5 }).map((_, i) => (
          <div key={i} className="flex items-center space-x-4 p-4 border rounded-lg">
            <Skeleton className="h-4 w-4 rounded" />
            <Skeleton className="h-4 flex-1" />
            <Skeleton className="h-8 w-16" />
          </div>
        ))}
      </div>
    </div>
  );
}
```

### 오류 UI
페이지별 오류 처리:

```typescript
/**
 * 할 일 페이지 오류 UI
 */
'use client';

export default function TodosError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // 개발 환경에서는 상세 로그 출력
    if (process.env.NODE_ENV === 'development') {
      console.error('할 일 페이지 오류:', error);
    }
  }, [error]);

  return (
    <div className="container mx-auto py-8">
      <div className="flex flex-col items-center justify-center min-h-[400px] text-center">
        <div className="mb-4 h-16 w-16 rounded-full bg-destructive/10 flex items-center justify-center">
          <AlertCircle className="h-8 w-8 text-destructive" />
        </div>
        <h2 className="text-2xl font-bold mb-2">할 일을 불러올 수 없습니다</h2>
        <p className="text-muted-foreground mb-6">
          일시적인 문제가 발생했습니다. 다시 시도해주세요.
        </p>
        <Button onClick={reset}>
          다시 시도
        </Button>
      </div>
    </div>
  );
}
```

## 메타데이터 관리

### 동적 메타데이터
페이지별 SEO 최적화:

```typescript
/**
 * 할 일 상세 페이지 메타데이터
 */
export async function generateMetadata({
  params,
}: {
  params: { id: string };
}): Promise<Metadata> {
  const todo = await getTodoById(params.id);

  if (!todo) {
    return {
      title: '할 일을 찾을 수 없습니다',
    };
  }

  return {
    title: `${todo.title} - AI 할 일 관리`,
    description: `할 일: ${todo.title}`,
    openGraph: {
      title: todo.title,
      description: `할 일: ${todo.title}`,
      type: 'article',
    },
  };
}
```

### 정적 메타데이터
기본 메타데이터 설정:

```typescript
/**
 * 할 일 목록 페이지 메타데이터
 */
export const metadata: Metadata = {
  title: '할 일 관리 - AI 할 일 관리',
  description: 'AI가 도와주는 스마트한 할 일 관리 시스템',
  keywords: ['할일', '관리', 'AI', '생산성'],
};
```